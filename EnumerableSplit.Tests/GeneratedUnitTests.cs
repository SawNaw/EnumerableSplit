using SawNaw.LinqExtensions.EnumerableSplit;

namespace EnumerableSplit.Tests
{
    // Unit tests generated by Copilot.
    public class GeneratedUnitTests
    {
        [Test]
        public void Split_WithSeparatorPredicate_SplitsCorrectly()
        {
            var input = new[] { "pie", "apple", "cake", "mud-pie", "nuts", "plum", "mud-spread", "milk", "butter" };
            var result = input.Split(s => s.StartsWith("mud")).ToList();

            Assert.That(result.Count, Is.EqualTo(3));
            Assert.That(result[0], Is.EqualTo(new[] { "pie", "apple", "cake" }));
            Assert.That(result[1], Is.EqualTo(new[] { "nuts", "plum" }));
            Assert.That(result[2], Is.EqualTo(new[] { "milk", "butter" }));
        }

        [Test]
        public void Split_WithSeparatorPredicate_EmptySource_ReturnsEmpty()
        {
            var input = Array.Empty<string>();
            var result = input.Split(s => s == "x").ToList();
            Assert.That(result, Is.Empty);
        }

        [Test]
        public void Split_WithSeparatorPredicate_NoSeparators_ReturnsWholeCollection()
        {
            var input = new[] { 1, 2, 3 };
            var result = input.Split(i => false).ToList();
            Assert.That(result.Count, Is.EqualTo(1));
            Assert.That(result[0], Is.EqualTo(new[] { 1, 2, 3 }));
        }

        [Test]
        public void Split_WithSeparatorPredicate_AllSeparators_ReturnsEmpty()
        {
            var input = new[] { 1, 2, 3 };
            var result = input.Split(i => true).ToList();
            Assert.That(result, Is.Empty);
        }

        [Test]
        public void Split_WithSeparatorPredicate_ThrowsOnNullSource()
        {
            IEnumerable<int> input = null;
            Assert.Throws<ArgumentNullException>(() => input.Split(i => i == 0).ToList());
        }

        [Test]
        public void Split_WithSeparatorElements_SplitsCorrectly()
        {
            var input = new[] { 1, 2, 0, 3, 4, 0, 5 };
            var result = input.Split(0).ToList();
            Assert.That(result.Count, Is.EqualTo(3));
            Assert.That(result[0], Is.EqualTo(new[] { 1, 2 }));
            Assert.That(result[1], Is.EqualTo(new[] { 3, 4 }));
            Assert.That(result[2], Is.EqualTo(new[] { 5 }));
        }

        [Test]
        public void Split_WithSeparatorElements_MultipleSeparators()
        {
            var input = new[] { 1, 2, 0, 3, 4, 9, 5 };
            var result = input.Split(0, 9).ToList();
            Assert.That(result.Count, Is.EqualTo(3));
            Assert.That(result[0], Is.EqualTo(new[] { 1, 2 }));
            Assert.That(result[1], Is.EqualTo(new[] { 3, 4 }));
            Assert.That(result[2], Is.EqualTo(new[] { 5 }));
        }

        [Test]
        public void Split_WithSeparatorElements_ThrowsOnNullSource()
        {
            IEnumerable<int> input = null;
            Assert.Throws<ArgumentNullException>(() => input.Split(0).ToList());
        }
    }
}